# -*- coding: utf-8 -*-
"""Naive Bayesian (Social_Network_Ads)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1STE-dSRgZfjwYJNBws_v7uwVN2DiHVIj

<center>

#<b>CS353 ML Lab 3</b>

## Name: K V Sumanth Reddy
## Roll No: 181CO225
---

###Q: Write a program in python to implement the na√Øve Bayesian classifier and Bayesian classifier for a sample training data set. Compute the accuracy of the classifier
---
#####Dataset Used: Social Network Ads (https://www.kaggle.com/rakeshrau/social-network-ads)
</center>

##Importing Libraries and Dataset
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.naive_bayes import GaussianNB

dataset = pd.read_csv('Social_Network_Ads.csv')
dataset.head(10)

"""##Data Preprocessing"""

x = dataset.iloc[:, 1:-1].values
y = dataset.iloc[:, -1].values

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough') # [0] is the cloumn on which one hot encoding is made
x = np.array(ct.fit_transform(x))

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)

"""##Training the Naive Bayes model on the Training set"""

model = GaussianNB()
model.fit(x_train,y_train)
acc1=model.score(x_test,y_test)*100
print("Accuracy: {:.2f}%".format(acc1))

y_pred = model.predict(x_test)

from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y_test,y_pred))

print("Confusion Matrix:\n",confusion_matrix(y_test, y_pred))

"""#USING FEATURE SCALING
###This is performed to normalize few columns (due to their higher values)
"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

model = GaussianNB()
model.fit(x_train,y_train)
acc2=model.score(x_test,y_test)*100
print("Accuracy: {:.2f}%".format(acc2))

y_pred = model.predict(x_test)

from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y_test,y_pred))

print("Confusion Matrix:\n",confusion_matrix(y_test, y_pred))

"""#Accuracy Comparison with and without feature scaling"""

print(" Accuracy without Feature Scaling: ",acc1,"\n","Accuracy with Feature Scaling: ",acc2)

